// joga da velha: tabuleiro, jogador e jogada
//o tabuleiro será um vetor(matriz composta de caracteres)
tipo tabuleiro{
    caractere: m[3][3];
}

//cada jogador é uma variavel que possui nome  e exerce um simbolo
tipo jogador {
    caractere: nome;
    caractere: simbolo;
}

//inseri as jogadas no tabuleiro
tipo jogada {
inteiro: i;
inteiro: j;
}

início {
    //Primeira coisa no jogo é criar o tabuleiro e depois limpar o mesmo(funções - repetição)
    tabuleiro: t;
    jogador: jogadores[2];
    
    inteiro: njog;
    njog = 0;
    
    zerar(t);
    
    criar_jogadores(jogadores);
    
    imprimir(t);
    
    enquanto (não tabuleiro_cheio(t) e não jogo_acabou(t)){
     //variavel jogada, armazenando a função aguardar jogada
    jogada: jogada;
    
    jogada = aguardar_jogada(jogadores[njog]);
    se (realizar_jogada(t, jogada, jogadores[njog])); {
    imprimir(t);
   
   njog = (njog + 1) % 2; 
    //se (njog == 0) {
   // njog=1;
   // } senão { 
   // n=jog = 0;
   // }
    }
    senão {
    escreva ("Jogada invalida, tente novamente");
    }
}
}
//recebe o valor do tabuleiro
função tabuleiro_cheio(tabuleiro: t) -> lógico {
    inteiro: i;
    inteiro: j;
}

função jogo_acabou(tabuleiro:t) -> lógico{
    //comparação dos 3 elementos da diagonal sendo eles diferentes do vazio
    se (t.m[0][0] == t.m[1][1] e t.m[0][0] == t.m{2][2] e t.m[0][0] <> " "){
    retorne verdadeiro;
    }
    se (t.m[0][2] == t.m[1][1] e t.m[0][0] == t.m{2][0] e t.m[0][2] <> " "){
    retorne verdadeiro;
    }
    se (t.m[0][0] == t.m[1][0] e t.m[0][0] == t.m{2][0] e t.m[0][0] <> " "){
    retorne verdadeiro;
    }
    se (t.m[0][1] == t.m[1][1] e t.m[0][1] == t.m{2][1] e t.m[0][1] <> " "){
    retorne verdadeiro;
    }
    se (t.m[0][2] == t.m[1][1] e t.m[0][0] == t.m{2][0] e t.m[0][2] <> " "){
    retorne verdadeiro;
    }
}
função zerar(tabuleiro:t) -> lógico {
    inteiro: i;
    inteiro: j;
        para i de o até 2 passo 1 {
        para j de 0 até 2 passo 1 {
            se (t.m[i][j] == " ";{
            retorne falso;
            }
        }
        }
        retorne verdadeiro;
    }

        para i de 0 até 2 passo 1 {
            para j de 0 até 2 passo 1 {
//função do tabuleiro recebe as linhas e colunas da matriz e deixa vazio
t.m[i][j] = " ";
        }
    }
}
//mostrar tabuleiro linha a linha
função imprimir (tabuleiro:t) {
    inteiro: i;
        para i de 0 até 2 passo 1 {
    //escreval não quebra linha no final
        escreval (t.m[i][0]);
        //coluna
        escreval(" | ");
        //referencia do tabuleiro em relação matriz com localização
        escreval (t.m[i][1]);
        escreval(" | ");
        escreva (t.m[i][2]);

        //linha a qual não pode ter na ultima linha
    se (i<2) {
    escreva("---------"); 
        }
        }
    }
}

//recebe o tipo jogador  crinado um arrey para cada jogador
função criar_jogadores(jogador: jogadores[2]) {
    jogadores[0].nome = "A";
    jogadores[0].simbolo = "X";
    
    jogadores[1].nome = "B"; 
    jogadores[1].simbolo = "O";
}

//perguntar  ao jogador a linha e coluna e retornar a informaç~çao do tipo jogada
função aguardar_jogada(jogador: jogador) -> jogada{
    //variavel jogada de tipo jogada
    jogada: jogada;
    
    leia("Jogador " + jogador.nome + " -> linha", jogada.i);
     leia("Jogador " + jogador.nome + " -> linha", jogada.j);
     retorne jogada;
}
//efetivar  a jogada no tabuleiro
função realizar_jogada(tabuleiro: t, jogada: jogada, jogador: jogador) -> lógico {
    se (t.m[jogada.i][jogada.j] <> " "){
    retorne falso;
    }
       t.m[jogada.i][jogada.j] = jogador.simbolo;
       retorne verdadeiro;
}
